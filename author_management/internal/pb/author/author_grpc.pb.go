// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: author.proto

package author

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthorService_GetAuthors_FullMethodName      = "/author.AuthorService/GetAuthors"
	AuthorService_GetSomeAuthor_FullMethodName   = "/author.AuthorService/GetSomeAuthor"
	AuthorService_GetAuthorsBook_FullMethodName  = "/author.AuthorService/GetAuthorsBook"
	AuthorService_GetAuthor_FullMethodName       = "/author.AuthorService/GetAuthor"
	AuthorService_InsertAuthor_FullMethodName    = "/author.AuthorService/InsertAuthor"
	AuthorService_DeleteOneAuthor_FullMethodName = "/author.AuthorService/DeleteOneAuthor"
)

// AuthorServiceClient is the client API for AuthorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthorServiceClient interface {
	GetAuthors(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Authors, error)
	GetSomeAuthor(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Authors, error)
	GetAuthorsBook(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*AuthorsBooksMap, error)
	GetAuthor(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Author, error)
	InsertAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*Message, error)
	DeleteOneAuthor(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Message, error)
}

type authorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthorServiceClient(cc grpc.ClientConnInterface) AuthorServiceClient {
	return &authorServiceClient{cc}
}

func (c *authorServiceClient) GetAuthors(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Authors, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Authors)
	err := c.cc.Invoke(ctx, AuthorService_GetAuthors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorServiceClient) GetSomeAuthor(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*Authors, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Authors)
	err := c.cc.Invoke(ctx, AuthorService_GetSomeAuthor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorServiceClient) GetAuthorsBook(ctx context.Context, in *Ids, opts ...grpc.CallOption) (*AuthorsBooksMap, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthorsBooksMap)
	err := c.cc.Invoke(ctx, AuthorService_GetAuthorsBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorServiceClient) GetAuthor(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Author, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Author)
	err := c.cc.Invoke(ctx, AuthorService_GetAuthor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorServiceClient) InsertAuthor(ctx context.Context, in *Author, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, AuthorService_InsertAuthor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorServiceClient) DeleteOneAuthor(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, AuthorService_DeleteOneAuthor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorServiceServer is the server API for AuthorService service.
// All implementations must embed UnimplementedAuthorServiceServer
// for forward compatibility.
type AuthorServiceServer interface {
	GetAuthors(context.Context, *Empty) (*Authors, error)
	GetSomeAuthor(context.Context, *Ids) (*Authors, error)
	GetAuthorsBook(context.Context, *Ids) (*AuthorsBooksMap, error)
	GetAuthor(context.Context, *Id) (*Author, error)
	InsertAuthor(context.Context, *Author) (*Message, error)
	DeleteOneAuthor(context.Context, *Id) (*Message, error)
	mustEmbedUnimplementedAuthorServiceServer()
}

// UnimplementedAuthorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthorServiceServer struct{}

func (UnimplementedAuthorServiceServer) GetAuthors(context.Context, *Empty) (*Authors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthors not implemented")
}
func (UnimplementedAuthorServiceServer) GetSomeAuthor(context.Context, *Ids) (*Authors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSomeAuthor not implemented")
}
func (UnimplementedAuthorServiceServer) GetAuthorsBook(context.Context, *Ids) (*AuthorsBooksMap, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthorsBook not implemented")
}
func (UnimplementedAuthorServiceServer) GetAuthor(context.Context, *Id) (*Author, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthor not implemented")
}
func (UnimplementedAuthorServiceServer) InsertAuthor(context.Context, *Author) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertAuthor not implemented")
}
func (UnimplementedAuthorServiceServer) DeleteOneAuthor(context.Context, *Id) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneAuthor not implemented")
}
func (UnimplementedAuthorServiceServer) mustEmbedUnimplementedAuthorServiceServer() {}
func (UnimplementedAuthorServiceServer) testEmbeddedByValue()                       {}

// UnsafeAuthorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthorServiceServer will
// result in compilation errors.
type UnsafeAuthorServiceServer interface {
	mustEmbedUnimplementedAuthorServiceServer()
}

func RegisterAuthorServiceServer(s grpc.ServiceRegistrar, srv AuthorServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthorService_ServiceDesc, srv)
}

func _AuthorService_GetAuthors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServiceServer).GetAuthors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorService_GetAuthors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServiceServer).GetAuthors(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorService_GetSomeAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServiceServer).GetSomeAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorService_GetSomeAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServiceServer).GetSomeAuthor(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorService_GetAuthorsBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ids)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServiceServer).GetAuthorsBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorService_GetAuthorsBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServiceServer).GetAuthorsBook(ctx, req.(*Ids))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorService_GetAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServiceServer).GetAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorService_GetAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServiceServer).GetAuthor(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorService_InsertAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Author)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServiceServer).InsertAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorService_InsertAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServiceServer).InsertAuthor(ctx, req.(*Author))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorService_DeleteOneAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorServiceServer).DeleteOneAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthorService_DeleteOneAuthor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorServiceServer).DeleteOneAuthor(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthorService_ServiceDesc is the grpc.ServiceDesc for AuthorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "author.AuthorService",
	HandlerType: (*AuthorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAuthors",
			Handler:    _AuthorService_GetAuthors_Handler,
		},
		{
			MethodName: "GetSomeAuthor",
			Handler:    _AuthorService_GetSomeAuthor_Handler,
		},
		{
			MethodName: "GetAuthorsBook",
			Handler:    _AuthorService_GetAuthorsBook_Handler,
		},
		{
			MethodName: "GetAuthor",
			Handler:    _AuthorService_GetAuthor_Handler,
		},
		{
			MethodName: "InsertAuthor",
			Handler:    _AuthorService_InsertAuthor_Handler,
		},
		{
			MethodName: "DeleteOneAuthor",
			Handler:    _AuthorService_DeleteOneAuthor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "author.proto",
}
